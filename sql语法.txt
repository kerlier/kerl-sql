
-- 1. select 可以是变量 ,函数以及表达式
select 100;

select "john"

select 100%98

select VERSION()

-- 2. 创建用户变量，作用域：针对于当前会话(连接)有效

-- 2.1 生命并初始化(没有命令)
 set @用户变量名=值
 set @用户变量名:=值
 select @用户变量名:=值
 
-- 2.2 赋值
 set @用户变量名=值
 set @用户变量名:=值
 select @用户变量名:=值
--  也可以通过select into 赋值
 select 字段 into 变量名 from 表；
 
set @name='john'
set @name=10
select @name

set @count=0;
select count(*) into count from test;
select @count;


-- 局部变量 作用域: 仅仅定义在它的begin end中
-- 声明方式:
-- declare 变量名 类型
-- declare 变量名 类型 default 值；

-- 赋值
-- 2.2 赋值
 set @用户变量名=值
 set @用户变量名:=值
 select @用户变量名:=值
--  也可以通过select into 赋值
 select 字段 into 变量名 from 表；
 
 -- 使用
 select 局部变量名
 
 用户变量： 当前会话    可以定义绘画中的任何地方       必须使用@
 局部变量:  begin end   只能在begin end中的第一句话    不用@
   
	 
 
-- 练习： 声明两个变量，并赋值，求和

用户变量
set @a=10;
set @b=11;
set @sum = @a+@b;
select @sum;


成员变量
declare m int default 1
declare n int default 2
declare sum int;
set sum=m+n;
select sum;


-- 存储过程和函数， 相当于java中的方法
-- 方法的好处： 提高了代码重用性

-- 存储过程 一组预先编译好的SQL语句的集合，可以理解成批处理语句
-- 存储过程语法：

-- 创建

create procedure 存储过程名(参数列表)
begin 
    存储过程体
end
-- 注意：参数列表包含三部分: 参数模式 参数名 参数类型
-- 参数模式：IN  参数可以作为输入
--           OUT  参数可以作为返回值
--           INOUT 参数可以作为输入 也可以作为输出

-- 如果存储过程只要一个话，begin end 可以省略

-- 存储过程中的sql必须以分号结束
-- 存储过程的结尾可以使用delimiter来自定义结束符
-- 调用


-- 练习
-- 空参列表：


delimiter $

create PROCEDURE myp1()
begin
   insert into test(id, name)
	 values(1,"a"),(2,"d"),(3,"d");
end $

-- 调用

call myp1()

-- 创建in模式参数的存储过程

create PROCEDURE myp2(IN name VARCHAR(20))
begin
   select * from test t where t.name= name;
end

create PROCEDURE myp4(IN name VARCHAR(20))
begin
    declare result int default 0;
	  select count(*) into result from test where test.name = name;
		select result;
END


call myp4("a")

-- 创建带out的存储过程

-- 传入a 和b 的值，然后都翻倍返回。 带INOUT的会自动返回

create PROCEDURE myp5(INOUT a INT ,INOUT b INT)
begin
		set a=a*2;
		set b=b*2;
end

set @m=10;
set @n=20;

call myp5(@m,@n);

select @m,@n;


-- 分支结构

-- if函数 实现简单的双分支
-- 语法 select IF(表达式1，表达式2, 表达式3)
-- 如果表达式1成立的话，if返回表达2 否则返回表达式3

select if(2>3,"hello","aaa") as result

-- case结构 类似java中的switch语句 实现等值判断和区间判断
-- 语法： case 变量| 表达式| 字段
				  when 要判断的值 then 要返回的值
					ELSE 要返回的值
					END CASE;
					
-- 特点： 


set @m=10;

select  
    case  
		when  @m > 10 then "大于10"
		ELSE "小于10"
		end  as result;
		

-- 实现成绩的分级


create PROCEDURE test_score(IN score INT)
begin
     case 
		 when score >= 90 and score<=100 then select 'A';
		 when score >= 80 and score<90 then select 'B';
		 else select 'd';
		 end case;
end
call test_score(80)


-- if实现多重分支

-- 语法：
    if  条件1 then 语句1；
		elseif 条件2 then 语句2；
		end if;
		
create FUNCTION test_score(score INT) returns CHAR
begin

		if score>=90 then return 'A';
		elseif score >=80 and score <90 then return 'B';
		else return 'd';
		end if;
end

select test_score(19)

-- 循环结构

while 条件 do
		循环体
end while

-- 批量插入记录

-- 这里使用的是存储过程，因为存储过程没有返回值，function需要返回值
create PROCEDURE pro_while(IN count INT)
begin
      declare i int default 1;
			while i <= count do
					insert into  test (id, name) values (concat(i,''),'a');
					set i = i+1;
			end while;
end 


call pro_while(5)

-- 使用leave来中断循环
create PROCEDURE pro_while2(IN insertCount INT)
begin
		 declare i int default 1;
		 a:while i<= insertCount do
			   insert into  test (id, name) values (concat(i,''),'a');
				 if i>20 then leave a;
				 end if;
				 set i= i+1;
		 end while a;
end 


call pro_while2(25)

-- 使用explain
EXPLAIN select * from test;

-- explain中id含义 包含了一组数字，表示执行select 字句和操作表的顺序
  id 相同的时候，执行顺序是由上到下
	id 不同的时候， 执行的顺序是按照 id从大到小执行
	id 相同不同的时候，执行的顺序是id从大到小执行

在工作中：始终是小表驱动大表

select_type：有六种

simple 是最简单的select查询，不包含子查询和union

primary 表示最外层的查询，也就是最外层的查询

subquery 表示 是一个子查询

derived 表示从子查询中衍生的表

union 如果第二个select 出现在union之后，被标记为union
      如果union包含在子查询中,那么外层select被标记为derided


type: 
system> const > eq_ref> ref> range> index >all


system表示当前表只有一行记录，相当于系统表
const 表示通过索引查找了一次就能找到，(相当于有索引，而且这个索引值是唯一的值)
eq_ref 唯一性索引扫描，表中只有一条记录能匹配到
ref 通过索引，查到很多条记录


分组函数的使用: 功能： 聚合函数 统计函数， 用于统计使用


常见分组函数：
    sum() 求和 avg() 平均值 max 最大值 min 最小值  count计算个数


语法：
select sum(column) from 表


分组函数可以一起使用:

round(double ,2) 保留两位小数
select sum(col1), max(col2) ,avg(col1) from 表示


1, 参数类型支持哪些类型

sum avg只支持数字类型, int ,double float

max() 可以支持 string, date  可以支持任何类型

count() 可以支持任何类型： 计算的是非空的值

2.  是否忽略null值
  sum是忽略null值，avg也是忽略null值

3. 分组函数可以搭配distince搭配

  select sum(distinct salary) from table

  select count(distinct salary) from table

4 分组查询一同查询的字段有限制
    一般是group by 后的字段，不能加上其他的字段’


分组查询的案例：

	group by 的语法：

   select 分组函数 ，列(要求出现在group by的后面) from [where] group by [order by]

   # 查询每个部门的平均工资
	select avg(salary) from table group by job_id

	#查询每个部门的最高工资
	select max(salary ) from table group by job_id;

	#添加筛选条件
	
	# 查询邮箱中包含a字段， 每个部门的平均工资
	select avg(salary) from table  where email like '%a%' group by department_id;

	# 查询有奖金的每个领导手下员工的最高工资
    select max(salary) ,manager_id from table where jiangjin is not null group by manager_id;

	# 添加复杂的筛选条件
	# 查询哪个部门的员工数 > 2
	  分析： 1. 查询每个部门的员工数 2. 根据1中的结果进行筛选，查询哪个大于2

	  select count(*) ,department_id from table group by department_id having count(*) > 2;

   

  

